/*
 * Copyright Â© 2016 Tinkoff Bank
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven-publish'
apply plugin: 'signing'

def isAndroidLibrary = project.extensions.findByName('android') != null

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ''
}

def getRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ''
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from isAndroidLibrary ? components.release : components.java
                groupId GROUP
                version versionName
                artifactId POM_ARTIFACT_ID
                afterEvaluate {
                    artifact sourcesJar
                    artifact javadocJar
                }
                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL
                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url isRelease ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    tasks.register('androidJavadocJar', Javadoc) {
        dependsOn(preBuild)
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }

    tasks.register('javadocJar', Jar) {
        dependsOn(tasks.named('androidJavadocJar'))
        archiveClassifier.set('javadoc')
        from "$buildDir/docs/javadoc"
    }

    signing {
        required { isRelease }
        sign publishing.publications.release
    }
}